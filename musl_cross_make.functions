# This file is part of libertine linux's package musl_cross_make. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/musl_cross_make/master/COPYRIGHT. No part of libertine linux's package musl_cross_make, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine linux's package musl_cross_make. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/musl_cross_make/master/COPYRIGHT.


variant=upstream

case "$package" in
	
	musl_cross_make)
		
		depends build_musl_cross_make_host
		build_needs "$libertine_host"-strip
		
		depends build_paxctl
		build_needs paxctl
				
		build_needs mkdir cp chmod ln
		libertine_compile_musl_cross_make()
		{
			mkdir -m 0755 -p "$(libertine_public_outputHostSysrootPath)"/usr/bin "$(libertine_public_outputHostSysrootPath)"/usr/lib
	
			cp "$(libertine_public_outputBuildSysrootPath build_musl_cross_make_host)"/usr/lib/libc.so "$(libertine_public_outputHostSysrootPath)"/usr/lib
			libertine_public_stripAndSecureBinary "$(libertine_public_outputHostSysrootPath)"/usr/lib/libc.so
			chmod 0555 "$(libertine_public_outputHostSysrootPath)"/usr/lib/libc.so
			ln -s libc.so "$(libertine_public_outputHostSysrootPath)"/usr/lib/"$libertine_hostForMuslLd"
			ln -s ../lib/"$libertine_hostForMuslLd" "$(libertine_public_outputHostSysrootPath)"/usr/bin/ldd
	
			libertine_public_copy "$(libertine_public_outputHostSysrootPath)"/. "$(libertine_public_outputInitramfsPath)"/
		}
	;;
	
	build_musl_cross_make_*)
	
		copy_subset="$variant/patches header-fixes litecross-fork patches-from-musl-cross-make patches-from-us patches-from-alpine-linux-aports"
		
		depends build_fortify_headers
		
		depends build_musl_cross_make_musl
		depends build_musl_cross_make_binutils
		depends build_musl_cross_make_gcc
		depends build_musl_cross_make_gmp
		depends build_musl_cross_make_mpfr
		depends build_musl_cross_make_isl
		depends build_musl_cross_make_linux
		
		depends build_busybox
		depends build_netbsd_src_sleep
		build_needs diff cat mv cp rm grep egrep uniq rmdir od tail cut env chmod tr head cut realpath touch expr sort basename dirname cmp true echo install sleep uname ls # Used in configure
		build_needs getconf # Used in configure; only present in our patched getconf
		build_needs date tar # Why ?
		build_needs false # Needed to replace makeinfo
		build_needs pwd
		
		#build_needs file # Used in configure!

		# Needed for libgomp, but not actually called... yeah, right, good code, lads!
		depends build_netbsd_src_byacc
		build_needs byacc
		
		depends build_reflex
		build_needs reflex
		
		# The version of patch in busybox seems unable to use the supplied patches
		depends build_netbsd_src_patch
		build_needs patch

		depends build_gnumake
		build_needs make

		depends build_ccache
		build_needs ccache
		
		depends build_perl
		build_needs perl pod2man
		
		depends build_gnuconfig
	
		depends build_autoconf
		build_needs autoconf autoheader autom4te autoreconf autoscan autoupdate ifnames
	
		depends build_automake
		build_needs automake aclocal
		
		depends build_gnum4
		build_needs m4
				
		depends build_slibtool
		build_needs clibtool clibtool-static libtoolize realpath
						
		case "$package" in
	
			build_musl_cross_make_build)
			
				build_needs cc
				build_needs c++
				build_needs ar
				build_needs ranlib
				build_needs objdump
		
				build_provides "$libertine_build"-cc
				build_provides "$libertine_build"-gcc
				build_provides "$libertine_build"-c++
				build_provides "$libertine_build"-g++
				build_provides "$libertine_build"-cpp
				build_provides "$libertine_build"-ld
				build_provides "$libertine_build"-as
				build_provides "$libertine_build"-strip
				build_provides "$libertine_build"-ar
				build_provides "$libertine_build"-ranlib
				build_provides "$libertine_build"-nm
				build_provides "$libertine_build"-gcc-ar
				build_provides "$libertine_build"-gcc-ranlib
				build_provides "$libertine_build"-gcc-nm
				build_provides "$libertine_build"-objcopy
				build_provides "$libertine_build"-objdump
				build_provides "$libertine_build"-readelf
				build_provides "$libertine_build"-elfedit
				build_provides "$libertine_build"-addr2line
				build_provides "$libertine_build"-c++filt
				build_provides "$libertine_build"-gcov
				build_provides "$libertine_build"-gcov-tool
				build_provides "$libertine_build"-gprof
				build_provides "$libertine_build"-size
				build_provides "$libertine_build"-strings
				
				libertine_compile_build_musl_cross_make_build()
				{
					_libertine_compile_musl_cross_make \
						"$libertine_build" \
						"$libertine_buildShorter" \
						"$(libertine_public_outputBuildSysrootPath)" \
						"$libertine_buildForMuslLd" \
						'' \
						"$libertine_buildCCompilerCreationCFlags" \
						"$libertine_buildCxxCompilerCreationCFlags" \
						''
				}
			;;
	
			build_musl_cross_make_host)
				
				depends build_musl_cross_make_build
			
				# ? do we need all this
				build_needs "$libertine_build"-cc
				build_needs "$libertine_build"-gcc
				build_needs "$libertine_build"-c++
				build_needs "$libertine_build"-g++
				build_needs "$libertine_build"-cpp
				build_needs "$libertine_build"-ld
				build_needs "$libertine_build"-as
				build_needs "$libertine_build"-strip
				build_needs "$libertine_build"-ar
				build_needs "$libertine_build"-ranlib
				build_needs "$libertine_build"-nm
				build_needs "$libertine_build"-objcopy
				build_needs "$libertine_build"-objdump
		
				build_provides "$libertine_host"-cc
				build_provides "$libertine_host"-gcc
				build_provides "$libertine_host"-c++
				build_provides "$libertine_host"-g++
				build_provides "$libertine_host"-cpp
				build_provides "$libertine_host"-ld
				build_provides "$libertine_host"-as
				build_provides "$libertine_host"-strip
				build_provides "$libertine_host"-ar
				build_provides "$libertine_host"-ranlib
				build_provides "$libertine_host"-nm
				build_provides "$libertine_host"-gcc-ar
				build_provides "$libertine_host"-gcc-ranlib
				build_provides "$libertine_host"-gcc-nm
				build_provides "$libertine_host"-objcopy
				build_provides "$libertine_host"-objdump
				build_provides "$libertine_host"-readelf
				build_provides "$libertine_host"-elfedit
				build_provides "$libertine_host"-addr2line
				build_provides "$libertine_host"-c++filt
				build_provides "$libertine_host"-gcov
				build_provides "$libertine_host"-gcov-tool
				build_provides "$libertine_host"-gprof
				build_provides "$libertine_host"-size
				build_provides "$libertine_host"-strings
		
				build_provides cc
				build_provides gcc
				build_provides c++
				build_provides g++
				build_provides cpp
				build_provides ld
				build_provides as
				build_provides strip
				build_provides ar
				build_provides ranlib
				build_provides nm
				build_provides gcc-ar
				build_provides gcc-ranlib
				build_provides gcc-nm
				build_provides objcopy
				build_provides objdump
				build_provides readelf
				build_provides elfedit
				build_provides addr2line
				build_provides c++filt
				build_provides gcov
				build_provides gcov-tool
				build_provides gprof
				build_provides size
				build_provides strings
		
				libertine_compile_build_musl_cross_make_host()
				{
					if core_variable_isUnset libertine_build_musl_cross_make_host_gccConfigureFlags; then
						libertine_build_musl_cross_make_host_gccConfigureFlags=''
					fi
					
					local unqualifiedGccBinary
					for unqualifiedGccBinary in cc gcc c++ g++ cpp ar ranlib objdump
					do
						ln -s "$libertine_build"-"$unqualifiedGccBinary"  "$(libertine_public_buildNeedsPath)"/"$unqualifiedGccBinary"
					done
					
					_libertine_compile_musl_cross_make \
						"$libertine_host" \
						"$libertine_hostShorter" \
						"$(libertine_public_outputBuildSysrootPath)" \
						"$libertine_hostForMuslLd" \
						"${libertine_build}-" \
						'' \
						'' \
						"--enable-default-pie ${libertine_build_musl_cross_make_host_gccConfigureFlags}"
				}
			;;
			
		esac
		
		build_needs rm ln rmdir cp mkdir chmod find xargs sed
		_libertine_compile_musl_cross_make()
		{
			local target="$1"
			local targetShorter="$2"
			local sysroot="$3"
			local ldName="$4"
			local crossCompilePrefix="$5"
			local additionalCFlags="$6"
			local additionalCxxFlags="$7"
			local additionalGccConfigurationFlags="$8"
			
			local litecrossBuildFolderPath="$(libertine_public_sourcePath)"/build
			
			pushd "$(libertine_public_sourcePath)"
				
				mkdir -m 0755 -p "$litecrossBuildFolderPath"
				
				_libertine_compile_musl_cross_make_createConfigMakForLitecross
				
				_libertine_compile_musl_cross_make_prepareSources
	
				_libertine_compile_musl_cross_make_workaroundLitecross
	
				libertine_public_ccache_createSymlinks
				
				ln -s byacc "$(libertine_public_buildNeedsPath)"/yacc
				ln -s reflex "$(libertine_public_buildNeedsPath)"/flex
		
				ln -s ar "$(libertine_public_buildNeedsPath)"/"$target"-ar
				ln -s ranlib "$(libertine_public_buildNeedsPath)"/"$target"-ranlib
						
				#export AM_DEFAULT_VERBOSITY=0
				#export LD_RUN_PATH=
				
				pushd "$litecrossBuildFolderPath"
					
					libertine_public_make
					
					libertine_public_make OUTPUT="$sysroot"/usr install
					
				popd
											
				#unset AM_DEFAULT_VERBOSITY
				#unset LD_RUN_PATH
								
				local effectiveSysroot="$sysroot"/usr
	
				# Remove cruft
				rm "$effectiveSysroot"/"$target"/bin/ld.bfd
				rm "$effectiveSysroot"/bin/"$target"-ld.bfd
				rm "$effectiveSysroot"/bin/"$target"-gcc-"$libertine_cmakeCompilerVersion"
	
				# Get rid of /usr/share; we'll end up copying it many, many times
				rm -rf "$effectiveSysroot"/share
	
				# Get rid of .py files
				find "$effectiveSysroot" -type f -name '*.py' | xargs -r rm -rf
	
				# Fix permissions of things
				find "$effectiveSysroot" -type f -name '*.so' | xargs -r chmod 0644
				find "$effectiveSysroot" -type f -name '*.so.*' | xargs -r chmod 0644
				find "$effectiveSysroot" -type f -name '*.la' | xargs -r chmod 0644
	
				_libertine_compile_musl_cross_make_replaceHardLinksWithSoftAndAddEasyToFindUnqualifiedWithTargetNameBinaries()
				{
					local gccExecutable="$1"
					
					ln -s "$target"-"$gccExecutable" "$effectiveSysroot"/bin/"$gccExecutable"
					
					# Some things, like 'ld', already exist as hardlinks
					rm -rf "$effectiveSysroot"/"$target"/bin/"$gccExecutable"
					ln -s ../../bin/"$gccExecutable" "$effectiveSysroot"/"$target"/bin/"$gccExecutable"
				}
				libertine_public_gccAndBinutilsExecutables _libertine_compile_musl_cross_make_replaceHardLinksWithSoftAndAddEasyToFindUnqualifiedWithTargetNameBinaries
	
				_libertine_compile_musl_cross_make_strip()
				{
					# Taking a copy of strip allows the strip binary to strip itself
					local stripper="$effectiveSysroot"/"$target"/bin/strip.temp
					cp "$effectiveSysroot"/"$target"/bin/strip "$stripper"

						_libertine_compile_musl_cross_make_strip_ifExtant()
						{
							local filePath="$1"
			
							if [ ! -e "$filePath" ]; then
								return 0
							fi
			
							if [ -s "$filePath" ]; then
								"$stripper" "$filePath"
							fi
						}
		
						_libertine_compile_musl_cross_make_strip_ifExtant_gcc()
						{
							local gccExecutable="$1"
							_libertine_compile_musl_cross_make_strip_ifExtant "$effectiveSysroot"/bin/"$gccExecutable"
						}
						
						libertine_public_gccAndBinutilsExecutables _libertine_compile_musl_cross_make_strip_ifExtant_gcc
		
						pushd "$effectiveSysroot"/libexec/gcc/"$target"/"$libertine_cmakeCompilerVersion"
							
							local binaryToStrip
							for binaryToStrip in install-tools/fixincl cc1 cc1plus collect2 lto-wrapper lto1 plugin/gengtype
							do
								_libertine_compile_musl_cross_make_strip_ifExtant "$binaryToStrip"
							done
			
						popd
						
						# Some .so files are actually GNU ld scripts...
						find "$effectiveSysroot" -name '*.so' -o -name '*.so.*' -o -name '*.a' -o -name '*.o' | xargs -r "$stripper" --strip-debug || true
		
					rm "$stripper"
				}
				#_libertine_compile_musl_cross_make_strip
	
				_libertine_compile_musl_cross_make_adjustHeaders()
				{
					local includeFolder="$effectiveSysroot"/include
					local targetIncludeFolder="$effectiveSysroot"/"$target"/include
		
					rmdir "$includeFolder"
					mv "$targetIncludeFolder" "$includeFolder"
					ln -s ../include "$targetIncludeFolder"
		
					libertine_public_copy "$(libertine_public_packagePath)"/header-fixes/. "$includeFolder"/
				}
				_libertine_compile_musl_cross_make_adjustHeaders
	
				_libertine_compile_musl_cross_make_ldAndLibcSo()
				{
					mv "$effectiveSysroot"/"$target"/lib/libc.so "$effectiveSysroot"/lib/libc.so
					ln -s ../../lib/libc.so "$effectiveSysroot"/"$target"/lib/libc.so
		
					rm "$effectiveSysroot"/"$target"/lib/"$libertine_buildForMuslLd"
					ln -s ../../lib/"$libertine_buildForMuslLd" "$effectiveSysroot"/"$target"/lib/"$ldName"

					ln -s libc.so "$effectiveSysroot"/lib/"$ldName"
					ln -s ../lib/"$ldName" "$effectiveSysroot"/bin/ldd
		
					# Needed for harcoded path /lib/"$libertine_buildForMuslLd"
					ln -s usr/lib "$sysroot"/lib
		
					chmod 0755 "$effectiveSysroot"/lib/libc.so
				}
				_libertine_compile_musl_cross_make_ldAndLibcSo
		
			popd
		}

		build_needs find sed
		_libertine_compile_musl_cross_make_removeCruftThatTriesToReconfigure()
		{
			local folderPath="$1"
	
			# Inspired by last answer at https://stackoverflow.com/questions/33278928/how-to-overcome-aclocal-1-15-is-missing-on-your-system-warning-when-compilin
			# Get rid of autoconf cruft that tries to reconfigure
			find "$folderPath" -type f -name 'Makefile.in' | while IFS= read -r filePath
			do
				sed -i \
					-e 's/ACLOCAL =.*$/ACLOCAL = true/g' \
					-e 's/AUTOCONF =.*$/AUTOCONF = true/g' \
					-e 's/AUTOHEADER =.*$/AUTOHEADER = true/g' \
					-e 's/AUTOMAKE =.*$/AUTOMAKE = true/g' \
					"$filePath"
			done
		}

		build_needs find rm sed
		_libertine_compile_musl_cross_make_prepareSources_fixLibToolPostAutoreconf()
		{
			local folderPath="$1"
			local sourcePackage="$2"
	
			find "$folderPath" -type f -name 'ltmain.sh' | while IFS= read -r filePath
			do
				rm "$filePath"
			done
	
			case "$package" in
		
				build_*)
					local envShaBang="$(libertine_public_buildNeedsPath)"/env
				;;
		
				*)
					local envShaBang=/usr/bin/env
				;;
		
			esac
			
			local dynamicLibtool='clibtool'
			local staticLibtool='clibtool-static'
	
			# Get rid of fscking hardcoded libtool
			find "$folderPath" -type f -name 'configure' | while IFS= read -r filePath
			do	
				# We use a different libtool for compiling gcc, libcc1 and libstdc++-v3 to allow dynamic linking
				local chosenLibtool="$staticLibtool"
								
				if [ "$sourcePackage" = 'gcc' ]; then
					
					local dynamicallyLinkedGccComponent
					for dynamicallyLinkedGccComponent in $componentInGccThatNeedsDynamicLinking
					do
						if [ "$filePath" = "$folderPath"/"$dynamicallyLinkedGccComponent"/configure ]; then
							chosenLibtool="$dynamicLibtool"
						fi
					done
				fi
				
				sed -i -e 's/^LIBTOOL=.*$/LIBTOOL='"$chosenLibtool"'/g' -e 's/^LIBTOOL_DEPS=.*$/LIBTOOL_DEPS=/g' -e 's/^ltmain=.*$/ltmain=NO_SUCH_LTMAIN/g' "$filePath"
	
				# Hack into the built-in ltmain.sh / libtool embedded in configure and make it re-route to $chosenLibtool
				sed -i -e 's/^# Generated automatically/exec '"$chosenLibtool"' "$@"\n# Generated automatically/g' "$filePath"
								
				# Remove hardcoded use of /usr/bin/file and related commands from libtool.m4
				sed -i \
					-e 's;/usr/bin/file;file;g' \
					-e 's;/bin/file;file;g' \
					-e 's;/usr/bin/objformat;objformat;g' \
					-e 's;for lt_ac_sed in \$lt_ac_sed_list /usr/xpg4/bin/sed;for lt_ac_sed in sed;g' \
					-e 's;for ac_dir in \$PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin;for ac_dir in $PATH;g' \
					-e 's;/usr/bin\$PATH_SEPARATOR\$PATH;$PATH;g' \
					-e 's;/usr/sbin/sysctl;sysctl;g' \
					-e 's;/sbin/sysctl;sysctl;g' \
					-e 's;/sbin/sysconfig;sysconfig;g' \
					-e 's;\$PATH:/sbin;$PATH;g' \
					"$filePath"
		
				# Remove hardcoded rubbish originally from autoconf .m4 files
				sed -i \
					-e 's,PATH='"'"'/bin;/bin'"'"',PATH="\$PATH",g' \
					-e 's,PATH='"'"'/bin:/bin'"'"',PATH="$PATH",g' \
					-e 's,for as_dir in /bin\$PATH_SEPARATOR/usr/bin\$PATH_SEPARATOR\$PATH,for as_dir in $PATH,g' \
					-e 's,/usr/bin\$PATH_SEPARATOR\$PATH",$PATH,g' \
					-e 's,/usr/bin/hostinfo,hostinfo,g' \
					-e 's,/bin/uname,uname,g' \
					-e 's,/bin/arch,arch,g' \
					-e 's,/bin/machine,machine,g' \
					-e 's,/bin/universe,universe,g' \
					-e 's,/etc/\* | /usr/sbin/\* | /usr/etc/\* | /sbin/\* | /usr/afsws/bin/\* |,/usr/bin/* |,g' \
					-e 's,for as_dir in \$PATH\$PATH_SEPARATOR/opt/sfw/bin,for as_dir in $PATH,g' \
					-e 's,\$PATH\$PATH_SEPARATOR/usr/xpg4/bin,$PATH,g' \
					-e 's,for ac_dir in \$PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin,for ac_dir in $PATH,g' \
					-e 's,#! /bin/sh,#!'"$envShaBang"' sh,g' \
					"$filePath"
		
			done
	
			_libertine_compile_musl_cross_make_removeCruftThatTriesToReconfigure "$folderPath"
		}
		
		build_needs cat cp find xargs mv mkdir sed tr chmod
		_libertine_compile_musl_cross_make_prepareSources()
		{
			local componentInGccThatNeedsDynamicLinking='gcc libcc1 libstdc++-v3'
			
			local sourcePackage
			for sourcePackage in binutils gcc gmp isl linux mpc mpfr musl
			do
				# Replicates litecross folder structure
				local litecrossSrcFolderName
				case "$sourcePackage" in
					
					linux)
						litecrossSrcFolderName=src_kernel_headers
					;;
					
					*)
						litecrossSrcFolderName=src_${sourcePackage}
					;;
					
				esac
				local sourcePackageFolderPath="$litecrossBuildFolderPath"/"$litecrossSrcFolderName"

				mkdir -m 0755 -p "$sourcePackageFolderPath"
				
				# Copy in source from dependencies
				local sourceUncopied=true
				local upstream
				for upstream in upstream fork tarball
				do
					local folderPath="$(libertine_public_originalPackagePath build_musl_cross_make_"$sourcePackage")"/"$upstream"
					if [ -d "$folderPath" ]; then
						libertine_public_copy "$folderPath"/. "$sourcePackageFolderPath"/
						sourceUncopied=false
						break
					fi
				done
				if $sourceUncopied; then
					core_exitError 1 "Could not copy source from package '$sourcePackage'"
				fi
				
				libertine_public_adjustShaBangAllExecutableFilesInPath "$sourcePackageFolderPath"
				
				
				case "$sourcePackage" in
				
					# Apply linux specific patches using apply-patches
					linux)
						"$(libertine_public_originalPackagePath build_musl_cross_make_linux)"/linux-patches/apply-patches "$sourcePackageFolderPath"
					;;

					# Apply patches to sources from Alpine Linux and musl-cross-make
					*)
						local patchFile
						set +f
						for patchFile in \
							"$(libertine_public_originalPackagePath)"/patches-from-alpine-linux-aports/before-musl-cross-make-patches/"$sourcePackage"/* \
							"$(libertine_public_originalPackagePath)"/patches-from-musl-cross-make/"$sourcePackage"/* \
							"$(libertine_public_originalPackagePath)"/patches-from-us/"$sourcePackage"/* \
							"$(libertine_public_originalPackagePath)"/patches-from-alpine-linux-aports/after-musl-cross-make-patches/"$sourcePackage"/*
						do
							set -f
			
							if [ ! -e "$patchFile" ]; then
								continue
							fi
			
							if [ ! -s "$patchFile" ]; then
								continue
							fi
			
							pushd "$sourcePackageFolderPath"
						
								printf 'Applying patch %s to %s\n' "$patchFile" "$sourcePackage" 1>&2
								patch -p1 -i "$patchFile" 1>&2
						
							popd
		
						done
						set -f
					;;
					
				esac
				
				# harden sources using fortify_headers
				case "$sourcePackage" in
					
					musl)
						mkdir -m 0755 -p "$sourcePackageFolderPath"/include/fortify
						libertine_public_copy "$(libertine_public_originalPackagePath fortify_headers)"/upstream/include/. "$sourcePackageFolderPath"/include/fortify/
					
						# Adjust musl make so it copies everything in include/fortify when installing
						sed -i \
							-e 's,INCLUDES = \$(wildcard \$(srcdir)/include/\*.h \$(srcdir)/include/\*/\*.h),INCLUDES = $(wildcard $(srcdir)/include/*.h $(srcdir)/include/*/*.h $(srcdir)/include/*/*/*.h),g' \
							"$sourcePackageFolderPath"/Makefile
					;;
					
				esac
				
				# binutils lex files assumes glibc as c lib, not musl, and so assumes string.h (for memcpy) is included.
				case "$sourcePackage" in
					
					binutils)
					
						sed -i \
							-e 's;#include "sysinfo.h";#include <string.h>\n#include "sysinfo.h";g' \
							"$sourcePackageFolderPath"/binutils/syslex.l
						
					;;
					
				esac
				
				# binutils 2.27 does not pass the flags for its own statically linked zlib (used by bfd / libbfd) when linking things depending on it... FFS
				# libtool makes the simple insanely complex again; could be a fault in slibtool
				case "$sourcePackage" in
					
					binutils)
					
						sed -i \
							-e 's/ZLIBINC = @zlibinc@/ZLIB = @zlibdir@ -lz\nZLIBINC = @zlibinc@/g' \
							-e 's/\$(LINK) \$(as_new_OBJECTS)/$(LINK) $(as_new_OBJECTS) $(ZLIB)/g' \
							"$sourcePackageFolderPath"/gas/Makefile.in
						
						sed -i \
							-e 's/LDADD = \$(BFDLIB) \$(LIBIBERTY) \$(LIBINTL)/LDADD = $(BFDLIB) $(LIBIBERTY) $(LIBINTL) $(ZLIB)/g' \
							-e 's/ar_LDADD = /ar_LDADD = $(ZLIB) /g' \
							-e 's/objdump_LDADD = /objdump_LDADD = $(ZLIB) /g' \
							-e 's/ranlib_LDADD = /ranlib_LDADD = $(ZLIB) /g' \
							-e 's/dlltool_LDADD = /dlltool_LDADD = $(ZLIB) /g' \
							-e 's/windres_LDADD = /windres_LDADD = $(ZLIB) /g' \
							-e 's/windmc_LDADD = /windmc_LDADD = $(ZLIB) /g' \
							"$sourcePackageFolderPath"/binutils/Makefile.in
						
						sed -i \
							-e 's;^ld_new_LDADD = ;ZLIB = -L$(top_builddir)/../zlib -lz\nld_new_LDADD = $(ZLIB) ;g' \
							"$sourcePackageFolderPath"/ld/Makefile.in
						
						sed -i \
							-e 's;gprof_LDADD = ;ZLIB = -L$(top_builddir)/../zlib -lz\ngprof_LDADD = $(ZLIB) ;g' \
							"$sourcePackageFolderPath"/gprof/Makefile.in
					;;
					
				esac

				# Something attacks LDFLAGS and strips '-L.../gmp/.libs'!
				case "$sourcePackage" in
			
					mpfr|mpc)

						sed -i \
							-e 's/lib'$sourcePackage'_la_LIBADD = /lib'$sourcePackage'_la_LIBADD = @LDFLAGS@ /g' \
							"$sourcePackageFolderPath"/src/Makefile.in
					;;
				
				esac
				
				# isl programs (which aren't used) need to link to MP libs (eg gmp)
				case "$sourcePackage" in
					
					isl)
				
						set -- -i
						local programToFix
						for programToFix in polyhedron_sample polytope_scan polyhedron_detect_equalities cat closure
						do
							set -- "$@" -e 's/^isl_'"$programToFix"'_LDADD = libisl.la/isl_'"$programToFix"'_LDADD = libisl.la @MP_LIBS@/g'
						done
				
						sed "$@" "$sourcePackageFolderPath"/Makefile.in
					;;
				esac
				
				# Fix libtool
				case "$sourcePackage" in
			
					musl|linux)
						:
					;;
						
					*)
						libertine_public_autoconf_replaceWithKnownVersionOfConfigSub "$sourcePackageFolderPath"
				
						_libertine_compile_musl_cross_make_prepareSources_fixLibToolPostAutoreconf "$sourcePackageFolderPath" "$sourcePackage"
					;;
			
				esac
				
				case "$sourcePackage" in
			
					musl|linux)
						:
					;;
						
					*)
						find "$sourcePackageFolderPath" -type f -name configure | xargs sed -i \
							-e 's;/usr/bin/file;file;g' \
							-e 's;/usr/bin/arch;arch;g' \
							-e 's;/usr/bin/oslevel;oslevel;g' \
							-e 's;/usr/bin/getconf;getconf;g' \
							-e 's;/usr/bin/uname;uname;g'
					;;
			
				esac
						
				# To support gcc plugins, we have to compile gcc as dynamically-linked (otherwise dlopen() doesn't work). However... everything else is statically-linked. This change statically links it to isl, gmp, mpfc, mpfr and zlib, etc but dynamically links it to libc and (hopefully) libstdc++
				# This change DOES NOT support linker plugins (--enable-plugins for linker vs --enable-plugin for gcc) such as LTO
				case "$sourcePackage" in
				
					gcc)
						
						pushd "$sourcePackageFolderPath"/gcc
							
							
							# Original was observed as: c++ -static --static -Wl,-Bstatic -static-libgcc -static-libstdc++ -pipe -O3 -g0
							# which is in litecross.fork/Makefile as CXX="$(CROSS_COMPILE_PREFIX)c++ -static --static -Wl,-Bstatic -static-libgcc -static-libstdc++ $(ADDITIONAL_CXXFLAGS)"
							# ie: ${crossCompilePrefix}c++ -static --static -Wl,-Bstatic -static-libgcc -static-libstdc++ ${additionalCxxFlags}
							# so without static parts it should be:-
							# local LLINKER="${crossCompilePrefix}c++ ${additionalCxxFlags}"
							#
							#
							# # Removes static linking of libc and ensures correct dynamic linker for cc1, cc1plus, lto1 and others
							# # (1) LLINKER = $(SHELL) $(srcdir)/lock-and-run.sh linkfe.lck $(LINKER)
							# # (2) LLINKER = $(LINKER)
							# sed -i \
							# 	-e 's;LLINKER = \$(SHELL).*;LLINKER = $(SHELL) $(srcdir)/lock-and-run.sh linkfe.lck '"$LLINKER"';g' \
							# 	-e 's;LLINKER = \$(LINKER).*;LLINKER = '"$LLINKER"';g' \
							# 	Makefile.in

							# Makes cc1, cc1plus and lto1 (and any other languages if we use them), etc dynamically linked with statically-linked dependencies except for libc
							sed -i \
								-e '/\$(ZLIB)/d' \
								-e 's/BACKENDLIBS = .*/BACKENDLIBS = -Wl,-Bstatic $(ISLLIBS) $(GMPLIBS) $(HOST_LIBS) $(ZLIB) -Wl,-Bdynamic $(PLUGINLIBS)/g' \
								Makefile.in

							# Makes xgcc, xg++ and cpp fully statically linked
							sed -i \
								-e 's;-o \$@ \$(GCC_OBJS);-static --static -Wl,-Bstatic -static-libgcc -o $@ $(GCC_OBJS);g' \
								Makefile.in
						popd
					
						local componentThatCanNotBeStaticallyLinked
						for componentThatCanNotBeStaticallyLinked in $componentInGccThatNeedsDynamicLinking
						do
							pushd "$sourcePackageFolderPath"/"$componentThatCanNotBeStaticallyLinked"
							
								# Try to workaround not being able to override or properly configure gcc in advance
								mv configure configure.orig
								
								{
									local envShaBang="$(libertine_public_buildNeedsPath)"/env
									printf '#!%s sh\n' "$envShaBang"
									cat "$(libertine_public_packagePath)"/litecross-fork/shared-configure
								} >configure
								chmod +x configure
								
								sed -i \
									-e 's/^CC = /override CC =/g' \
									-e 's/^CXX = /override CXX =/g' \
									-e 's/^CPP = /override CPP =/g' \
									-e 's/^CXXCPP = /override CXXCPP =/g' \
									-e 's/^LIBTOOL = /override LIBTOOL =/g' \
									Makefile.in
								
							popd
						done
					;;
		
				esac
								
				# Fix bashisms		
				case "$sourcePackage" in
					
					binutils)
						sed -i \
							-e 's;#!/bin/bash;#!'"$(libertine_public_buildNeedsPath)"'/env sh;g' \
							"$sourcePackageFolderPath"/ld/genscrba.sh
					;;
					
					gcc)
						sed -i \
							-e 's;#!/bin/bash;#!'"$(libertine_public_buildNeedsPath)"'/env sh;g' \
							"$sourcePackageFolderPath"/libstdc++-v3/scripts/run_doxygen \
							"$sourcePackageFolderPath"/gcc/dbgcnt.def
					;;
					
				esac
			done
		}

		build_needs sed mv ln mkdir
		_libertine_compile_musl_cross_make_workaroundLitecross()
		{
			pushd "$litecrossBuildFolderPath"
			
				ln -s ../../litecross-fork/Makefile
								
				mkdir -m 0755 -p src_toolchain
				
				pushd src_toolchain
					set +f
						ln -s ../src_binutils/* .
						ln -s -f ../src_gcc/* .
						ln -s ../src_gmp gmp
						ln -s ../src_mpc mpc
						ln -s ../src_mpfr mpfr
						ln -s ../src_isl isl
					set -f
				popd
				
			popd			
		}
		
		build_needs cat
		_libertine_compile_musl_cross_make_createConfigMakForLitecross()
		{
			cat >build/config.mak <<EOF
CROSS_COMPILE_PREFIX = ${crossCompilePrefix}
ADDITIONAL_CFLAGS = ${additionalCFlags}
ADDITIONAL_CXXFLAGS = ${additionalCxxFlags}
TARGET = ${target}
OUTPUT = ${sysroot}/usr
GCC_CONFIG += ${additionalGccConfigurationFlags}
EOF
		}
		
	;;
	
esac
